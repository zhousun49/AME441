%% Declaration of General Variables
% Nominal voltage is the average voltage - basically just not fully charged
nomV = 504; % [V]
maxPower = 80000; %[W]
% Internal Resistence of battery
R = 0.7; %[ohms]

% Dimensions of heat sink
sinkHeight = 0.5; %[m]
sinkWidth = 0.12388 * 5; %[m] 
sinkThick = 0.00635; %[m]

% Dimenstions of Fin
finLength = sinkHeight;
finHeight = 0.0127; %[m]
finThick = 0.003175; %[m]
finBtwn = sinkThick; %[m]

% Number of fins/floors
finPerModule = 13;
numModule = 5;

% Surface area at floor of fins
SAfloor = finPerModule * numModule * finLength * finBtwn;

% Surface area of fin walls
SAwalls = finPerModule * numModule * 2 * finLength * finHeight;

% Surface area of fin tips
SAtips = finPerModule * numModule * finThick * finLength;

% Total fin area
SAfin = SAwalls + SAtips;

% Total SA
SAtot = SAfin + SAfloor;
fprintf('SAtot = %d\n', SAtot);

% Properties of heat sink (Aluminum and copper)
Kcop = 385; %[W/m K]
Kalum = 205; %[W/m K]

% Temperature Assumptions
Tamb = 27; %[C]
Tmax = 40; %[C]
delT = Tmax - Tamb;

% Air properties
density = 1.184;
specificHeat = 1007;
Kair = 0.02551;
kinVisc = 0.00001562;
prandtl = 0.7296;

%% Calculations of Heat Generation
% The maximum amount of current will be calculated based on max power
% demand, as determined by the race rules to be 80kW
% I = P/V
Imax = maxPower/nomV;

% Using Imax, the heat generation (Q) can be completed
Qgen = Imax^2 * R; %[W]
fprintf('The heat generated by battery is: %d \n', Qgen);

%% Calculations of Sink Heat Conduction
% We know the total heat generated, but how much heat can be disipated by
% the sink. This is based on thickness and assumes just a plate.

% Split into levels, the first is conduction to the floor which is then
% convected away. Second is fin surface area, which is then conducted away
% K = Kalum;
% 
% Qcond1 = (K * SAfloor * delT) / time;
% fprintf('The heat conducted from module to sink floor is: %d \n', Qcond1);
% 
% Qcond2 = (K * SAfin * delT) / time;
% fprintf('The heat conducted from module to sink fins is: %d \n', Qcond2);
% 
% QcondTot = Qcond1 + Qcond2;

%% Calculations of Sink Convections
% From the various surfaces, treating as flat plate

Qconv = Qgen;
h = Qconv / (SAtot * delT);
fprintf('h from sink: %d \n', h);


%% Calculate Nusselt Number
Nu = h * finLength / Kair;
fprintf('Nu : %d \n', Nu);

%% Calculate the Re
ReL = Nu^2 / (0.664^2 * prandtl^(2/3));
syms Re
eqn = Nu == 0.037 * Re^(0.8)*prandtl^(1/3);
ReT = solve(eqn,Re);
fprintf('ReT : %d \n', ReT);
fprintf('ReL : %d \n', ReL);

%% Calculate VelAvg
V = ReT * kinVisc / finLength;
fprintf('Avg Vel : %d \n', V);

